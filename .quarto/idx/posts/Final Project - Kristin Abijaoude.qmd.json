{"title":"Citizenship Laws by Country","markdown":{"yaml":{"title":"Citizenship Laws by Country","description":"MY FINAL PROJECT","author":"KRISTIN ABIJAOUDE","date":"`r Sys.Date()`","output":"distill::distill_article"},"headingText":"Asking the Research Question","containsRefs":false,"markdown":"\n\n```{r}\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(collapsibleTree)\nlibrary(treemap)\n\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\nEight billion humans. About 200 countries. Many laws with a million asterisks next to them.\n\nEach country handles citizenship and immigration differently. Some countries permit dual citizenship, while others restrict how many nationalities their citizens can have. Some countries give unconditional citizenship to any child born on their soil, while others do if their parents are citizens. Finally, there are countries that only restrict the path to citizenship to certain races, ethnic, or religious groups.\n\nA citizenship is a contract between the citizen and the country. The citizen pledges allegiance to the country (or countries); and in turn, the country (or countries) provide rights and protections for the citizen. For example, I am a dual American-Lebanese citizen; I was born in America, which provides unconditional birthright citizenship, and my parents passed the Lebanese nationality down to my sisters and me. The allegiance between the citizen and the country can break, just like a contract. In several cases, the citizenship can be revoked, from voluntary renunciation of a citizenship or involuntary renunciation due to disloyalty, criminal offenses, or even having dual citizenship. Note the word “several” since the situation like this is on a case-by-case analysis. Out of curiosity and interest, the purpose of this report is to analyze the bureaucratic nature of citizenship and immigration.\n\nQuestion: Which countries have more lax citizenship laws, and which countries have more restrictive citizenship laws?\n\n## Open Dataset\n\nThe dataset, which is called GLOBALCIT Citizenship Law Dataset, originates from Italy-based European University Institute, specifically at the Cadmus EUI Research Repository. Maarten Peter Link et. al., from the Robert Schuman Centre for Advanced Studies collected data on different ways citizenship can be acquired or loss in each country as of 2020. \n\n\n```{r}\n# citizenship laws by country\ncitizenship <- read.csv(\"_data/GLOBALCIT Citizenship Law v1 EUI ResData/Data/data_v1.0_country-year.csv\")\n\ncitizenship\n```\n\n```{r}\ndim(citizenship)\n```\n\nThere are three datasets; one dataset about citizenship acquisition, another dataset about loss of citizenship; and a mega dataset containing both laws. Trying to merge the two former datasets would be like reinventing the wheel, so I opted to analyze the mega dataset, which consisted of 104 columns and 190 rows. Each row lists the country in the order of their country code in the Italian language. \n\n```{r}\ncolnames(citizenship)\n```\n\nTo make this report easier for the reader, as well as myself, I will be broadly focusing on whether the citizenship laws are enforced, regardless of the exceptions in place. For example, if a country allows parents to pass down citizenship to their children, I will classify that as “yes”, even if there’s an age limit to receiving citizenship, or if a country allows dual citizenship with certain countries, I will classify that as “Yes” as in they allow dual citizenship. However, I will keep the original dataset to manipulate more variables later.\n\n## Tidy and Manipulate Dataset\n\nThis is an extremely messy dataset, so with `mutate()` and `case_when()`, I reorganize and recode the variables according to the code guide provided in the ZIP file. The A stands for \"acquisition\", as in \"how citizenship is acquired\", and L stands for \"loss\" as in \"how citizenship is loss\". The word bin, short for binary, means if the country has the citizenship law, and cat, short for category, means what the exceptions are in the citizenship law, but I will solely focus on the binary data for now.\n\nFirst, let's recode the acquisition variables.\n\n```{r}\n# recode laws on acquisition of citizenship\ncitizen_tidy <- citizenship %>%\n  mutate(\"acq_descborn\" = case_when(A01a_bin == 1 ~ \"Yes\",   # Person born to a citizen of a country (birth in that country)\n                                     A01a_bin == 0 ~ \"No\"),\n         \"acq_descabroad\" = case_when(A01b_bin == 1 ~ \"Yes\", # Person born to a citizen of a country (birth abroad)\n                                       A01b_bin == 0 ~ \"No\"),\n         \"acq_birthright\" = case_when(A02a_bin == 1 ~ \"Yes\", # Person born in a country regardless of parent's nationality\n                                      A02a_bin == 0 ~ \"No\"),\n         \"acq_parents\"  = case_when (A02b_bin == 1 ~ \"Yes\", # Person born to a parent who was also born in same country\n                                     A02b_bin == 0 ~ \"No\"), \n         \"acq_found\" = case_when(A03a_bin == 1 ~ \"Yes\", # Child found in a country of unknown parentage\n                                 A03a_bin == 0 ~ \"No\"),\n         \"acq_parent_est\" = case_when(A04_bin == 1 ~ \"Yes\", # Establishment of parentage\n                                      A04_bin == 0 ~ \"No\"),\n         \"acq_residency\" = case_when(A06_bin == 1 ~ \"Yes\", # Residence-based acquisition\n                                     A06_bin == 0 ~ \"No\"),\n         \"acq_renounce\" = case_when(A06b_bin == 0 ~ \"No\", # Person must renounce old citizenship first\n                                    A06b_bin == 1 ~ \"Yes\",\n                                    TRUE ~ \"No\"),\n         \"acq_lang\" = case_when(A06c_bin == 0 ~ \"No\", # Person must know the language basics\n                                A06c_bin == 1 ~ \"Yes\",\n                                TRUE ~ \"No\"),\n         \"acq_good_chara\" = case_when(A06e_bin == 1 ~ \"Yes\", # Person must be of good character\n                                      A06e_bin == 0 ~ \"No\",\n                                      TRUE ~ \"No\"),\n         \"acq_econ\" = case_when(A06f_bin == 0 ~ \"No\", # Person must have sufficient income\n                                A06f_bin == 1 ~ \"Yes\",\n                                TRUE ~ \"No\"),\n         \"acq_childhood\" = case_when(A07_bin == 0 ~ \"No\", # Person with a certain period of residence or schooling as a minor\n                                     A07_bin == 1 ~ \"Yes\"),\n         \"acq_marriage\" = case_when(A08_bin == 0 ~ \"No\", # Person marries a citizen\n                                    A08_bin == 1 ~ \"Yes\"),\n         \"acq_transfer\" = case_when(A09_bin == 0 ~ \"No\", # Transfer to a child from a parent\n                                    A09_bin == 1 ~ \"Yes\"),\n         \"acq_adopt\" = case_when(A10_bin == 0 ~ \"No\", # Person who is adopted by a citizen\n                                 A10_bin == 1 ~ \"Yes\"),\n         \"acq_relative\" = case_when(A11_bin == 1 ~ \"Yes\", # Person who is another relative of a citizen\n                                    A11_bin == 0 ~ \"No\"),\n         \"acq_rel_former\" = case_when(A12a_bin == 1 ~ \"Yes\", # Person who is the relative of a former citizen\n                                      A12a_bin == 0 ~ \"No\"),\n         \"acq_rel_dead\" = case_when(A12b_bin == 1 ~ \"Yes\", # Person who is the relative of a deceased citizen\n                                    A12b_bin == 0 ~ \"No\"),\n         \"acq_spouse\" = case_when(A13_bin == 1 ~ \"Yes\", # Person who is the spouse or registered partner of citizen\n                                  A13_bin == 0 ~ \"No\"),\n         \"acq_dep_citizen\" = case_when(A14_bin == 0 ~ \"No\", # Person who is the dependent of the citizen\n                                       A14_bin == 1 ~ \"Yes\"),\n         \"acq_regain\" = case_when(A16_bin == 1 ~ \"Yes\", # Person who was once a former citizen and regains citizenship\n                                  A16_bin == 0 ~ \"No\"), \n         \"acq_specific\" = case_when(A18_bin == 0 ~ \"No\", # Person who possesses the citizenship of a specific country\n                                    A18_bin == 1 ~ \"Yes\"),\n         \"acq_cxn\" = case_when(A19_bin == 0 ~ \"No\", # Person who has a cultural affinity\n                               A19_bin == 1 ~ \"Yes\"),\n         \"acq_presume\" = case_when(A20_bin == 0 ~ \"No\", # Person who is a presumed citizen acted in good faith\n                                   A20_bin == 1 ~ \"Yes\"),\n         \"acq_longterm\" = case_when(A21_bin == 0 ~ \"No\", # Person who has resided in a country for a very long time\n                                    A21_bin == 1 ~ \"Yes\"),\n         \"acq_refugees\" = case_when(A22_bin == 0 ~ \"No\", # Person who is a recognised refugee\n                                    A22_bin == 1 ~ \"Yes\"),\n         \"acq_stateless\" = case_when(A23_bin == 0 ~ \"No\", # Person who is stateless or of undetermined citizenship\n                                     A23_bin == 1 ~ \"Yes\"),\n         \"acq_exceptional\" = case_when(A24_bin == 1 ~ \"Yes\", # Person who has special achievements\n                                       A24_bin == 0 ~ \"No\"),\n         \"acq_service\" = case_when(A25_bin == 1 ~ \"Yes\", # Person who is in the public service\n                                   A25_bin == 0 ~ \"No\"),\n         \"acq_invest\" = case_when(A26_bin == 0 ~ \"No\", # Person who invests in the country\n                                  A26_bin == 1 ~ \"Yes\"))\n\n# remove unnecessary columns \ncitizen_tidy <- citizen_tidy[,-5:-73]\n\n# sanity check point\ncitizen_tidy\n```\nNext, time to recode laws dealing with loss of citizenship. \n\n```{r}\n# recode laws on loss of citizenship\ncitizen_tidy <- citizen_tidy %>%\n  mutate(\"loss_volunteer\" = case_when(L01_bin == 1 ~ \"Yes\", # Person who voluntarily renounces the citizenship of his/her country\n                                      L01_bin == 0 ~ \"No\"),\n         \"loss_abroad\" = case_when(L02_bin == 1 ~ \"Yes\", # Person who resides outside the country of which he/she is a citizen\n                                   L02_bin == 0 ~ \"No\"),\n         \"loss_foreignarmy\" = case_when(L03_bin == 1 ~ \"Yes\", # Person who renders military service to a foreign country\n                                        L03_bin == 0 ~ \"No\"),\n         \"loss_foreignserv\"  = case_when (L04_bin == 1 ~ \"Yes\", # Person who renders other services to a foreign country\n                                          L04_bin == 0 ~ \"No\"),\n         \"loss_newcitizen\" = case_when(L05_bin == 1 ~ \"Yes\", # Person who acquires a foreign citizenship\n                                       L05_bin == 0 ~ \"No\"),\n         \"loss_mustchoose\" = case_when(L06_bin == 1 ~ \"Yes\", # Non-renunciation of foreign citizenship (acquisition by birth)\n                                       L06_bin == 0 ~ \"No\"),\n         \"loss_disloyal\" = case_when(L07_bin == 1 ~ \"Yes\", # Loss of citizenship due to disloyalty or treason\n                                     L07_bin == 0 ~ \"No\"),\n         \"loss_crime\" = case_when(L08_bin == 1 ~ \"Yes\", # Loss of citizenship due to other criminal offenses\n                                  L08_bin == 0 ~ \"No\"),\n         \"loss_fraud\" = case_when(L09_bin == 1 ~ \"Yes\", # Person who has acquired citizenship by fraud\n                                  L09_bin == 0 ~ \"No\"),\n         \"loss_birth_acq\" = case_when(L10_bin == 1 ~ \"Yes\", # Person who retains a foreign citizenship other than birth\n                                      L10_bin == 0 ~ \"No\"),\n         \"loss_byparent\" = case_when(L11_bin == 1 ~ \"Yes\", # Person whose parent loses citizenship of a country\n                                     L11_bin == 0 ~ \"No\"),\n         \"loss_byspouse\" = case_when(L12_bin == 1 ~ \"Yes\", # Person whose partner loses citizenship of a country\n                                     L12_bin == 0 ~ \"No\"),\n         \"loss_parent_annul\" = case_when(L13a_bin == 1 ~ \"Yes\", # Person whose descent from a citizen is annulled\n                                         L13a_bin == 0 ~ \"No\"),\n         \"loss_adopt_abroad\" = case_when(L13b_bin == 1 ~ \"Yes\", # Loss through adoption or guardianship abroad\n                                         L13b_bin == 0 ~ \"No\"),\n         \"loss_former_stateless\" = case_when(L14_bin == 1 ~ \"Yes\", # Former stateless person who acquired foreigh citizenship\n                                             L14_bin == 0 ~ \"No\"))\n# remove unnecessary columns \ncitizen_tidy <- citizen_tidy[,-5:-34]\n\n# sanity check point\ncitizen_tidy\n```\nI recoded countries that permit dual citizenship.\n\n```{r}\n# does the country allow dual citizenship?\ncitizen_tidy <- citizen_tidy %>%\n  mutate(\"dual_permit\" = case_when(dualcit_comb == 0 ~ \"No\",\n                                   dualcit_comb > 0 ~ \"Yes\")) %>%\n  select(-c(dualcit_comb)) %>%\n  relocate(\"dual_permit\", .after = \"year\") %>%\n  relocate(\"country\", .after = \"year\")\n\n# sanity check point\ncitizen_tidy\n```\n# Visualizing the Dataset\n\nAfter all of the `mutate()` and `case_when()` coding, visualizing the data was the next step. To start the process, I grabbed the frequencies of the characters `yes` and `no` with `group_by()` and `summarise_by()`. \n\n```{r}\n# get sum of each variable\ncitizen_tidy %>% \n  group_by(`dual_permit`) %>%\n  summarise(n_dual = sum(!is.na(`country`)))\n```\nSince I was dealing with 47 variables, I looked for codes to cut down time and space. Insetad of repeating the above codes, I used the following codes below:\n\n```{r}\n# now let's try to repeat that process across the board\ncitizen_sum <- citizen_tidy %>%\n  select(5:50) %>%\n  as.tibble() \n\n# compute unique levels in data frame\nlvls <- unique(unlist(citizen_sum))\n\n# apply the sum per value \ncitizen_sum <- sapply(citizen_sum, \n                      function(x) table(factor(x, levels = lvls, \n                                               ordered = TRUE)))\n\n# touch ups and add ons required\ncitizen_sum <- as.data.frame(citizen_sum)\ncitizen_sum$Law <- add_column(\"law\")\ncitizen_sum[1, 47] = \"yes\"\ncitizen_sum[2,47] = \"no\"\n\n# sanity check point\ncitizen_sum\n\ndim(citizen_sum)\n```\n\nAfter running the above codes, I collapsed the dataset into two rows with 47 variables. Since I was dealing with repetitive information, I used the `loop` function to generate my desired results. In other words, starting with `dual_permit` (countries that permit multiple nationalities), I generate 47 bar graphs for each variable.\n\n```{r}\n# time to graph\n# let's not repeat ourselves\nfor(i in 1:ncol(citizen_sum)) {                                                                 \n  print(ggplot(citizen_sum, aes(y = Law, x = citizen_sum[ , i])) +  # ggplot within for-loop\n          geom_bar(stat = \"identity\", fill = \"black\")) +\n    ylab(\"Number of Countries\") +\n    coord_flip()\n}\n# i can't add the labels for each chart, so i suggest that one follows the dataset from left to right, starting with dual_permit\n```\n\nNext, I condensed the 47 bar graphs into one stacked on one another. In order to execute this, I need to pivot my data from wide to long with `pivot_longer()`.\n\n```{r}\n# pivot time\ncitizen_pivot <- citizen_sum %>% pivot_longer(cols=c(1:46),\n                                              names_to='law_type',\n                                              values_to='answers') \n# sanity check point\ncitizen_pivot\n```\n```{r}\nggplot(citizen_pivot,\n       aes(x = law_type,\n           y = answers,\n           fill = Law)) +\n  geom_bar(stat = \"identity\",\n           position = \"stack\") +\n  xlab(\"Citizenship law\") +\n  ylab(\"Number of countries\") +\n  ggtitle(\"Citizenship Laws by Country\") +\n  coord_flip()\n```\nFrom my results, virtually all of the countries permit citizenship based on one being born in the country to citizens of said country, but a smaller but significant portion of those countries allow birthright citizenship (one of which is the USA), or automatic citizenship to newborns regardless of their parents' nationalities. In addition, the majority of the countries permit citizenship based on marriage, certain years of residency, and permit dual citizenship.\n\nIn regards to loss of citizenship, most countries let former citizen renounce their citizenship voluntary. In addition, there are laws in place that warrant a loss of citizenship for the person. For example, the majority of the countries have laws that strip people of their citizenship if they gained through fraudulent means or if they served in a foreign government or army (the foreign country would be the country restricting dual nationality in order to serve in their government or army).\n\nUnfortunately for stateless people, most countries have very few, if any, pathways for them to gain citizenship, leaving them in a legal and societal limbo. \n\nAs I mentioned before, I kept the original dataset so I could work on the exceptions for acquiring or losing citizenship. To save space and time, I selected a few provisions, as seen below.\n\n```{r}\n# dataset for exceptions \ncitizen_loss <- citizenship %>%\n  transmute(\"loss_newcitizen\" = case_when(L05_bin == 1 ~ \"Yes\",\n                                          L05_bin == 0 ~ \"No\"),\n            \"categoryloss1\" = case_when(L05_cat == 1 ~ \"automatic loss lapse\",\n                                       L05_cat == 2 ~ \"some exceptions lapse\",\n                                       L05_cat == 3 ~ \"lapse applicable only to naturalized citizens\",\n                                       L05_cat == 4 ~ \"automatic loss withdrawal\",\n                                       L05_cat == 5 ~ \"some exceptions withdrawal\",\n                                       L05_cat == 6 ~ \"withdrawal applicable only to naturalized citizens\",\n                                       L05_cat == 0 ~ \"no case\"),\n            \"loss_byparent\" = case_when(L11_bin == 1 ~ \"Yes\",\n                                        L11_bin == 0 ~ \"No\"),\n            \"categoryloss2\" = case_when(L11_cat == 0 ~ \"no case\", \n                                       L11_cat == 1 ~ \"generally applicable\",\n                                       L11_cat == 2 ~ \"some exceptions\",\n                                       L11_cat == 3 ~ \"lost on particular grounds\",\n                                       L11_cat == 4 ~ \"loss on particular grounds with exceptions\"),\n            \"loss_foundling\" = case_when(L14_bin == 1 ~ \"Yes\",\n                                         L14_bin == 0 ~ \"No\"),\n            \"categoryloss3\" = case_when(L14_cat == 1  ~ \"loss applies with citizenship as foundling\",\n                                        L14_cat == 2 ~ \"loss applies with citizenship as stateless\",\n                                        L14_cat == 3 ~ \"generally applicable\",\n                                        L14_cat == 0 ~ \"no case\"))\n# sanity checkpoint\ncitizen_loss\n```\nI found this `ggplot` code really helpful: these interactive dendrograms branched off based on exceptions, as I coded and modeled below: \n\n```{r}\n# interactive dendrogram\n\n# loss of citizenship from acquiring another citizenship since the new country restricts dual citizenship\n# create dataset\nloss_newcitizen <- select(citizen_loss, c(loss_newcitizen, categoryloss1)) \nloss_newcitizen <- as.data.frame(loss_newcitizen)\n  \n\ncollapsibleTree(loss_newcitizen, \n                hierarchy = c(\"loss_newcitizen\", \"categoryloss1\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n# I'm not sure why the no node has multiple branches when it should have one\n\n# loss of citizenship from parents losing their citizenship\nloss_byparent <- select(citizen_loss, c(loss_byparent, categoryloss2)) \nloss_byparent <- as.data.frame(loss_byparent)\n\ncollapsibleTree(loss_byparent, \n                hierarchy = c(\"loss_byparent\", \"categoryloss2\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n\n# when a former stateless person acquires citizenship from another country\nloss_founding <- select(citizen_loss, c(loss_foundling, categoryloss3)) \nloss_founding <- as.data.frame(loss_founding)\n\ncollapsibleTree(loss_founding, \n                hierarchy = c(\"loss_foundling\", \"categoryloss3\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n\n```\n\nI repeated this process with the laws in regards to acquiring citizenship:\n\n```{r}\ncitizen_acq <- citizenship %>%\n  transmute(\"acq_borndescent\" = case_when(A01a_bin == 1 ~ \"Yes\",\n                                          A01a_bin == 0 ~ \"No\"),\n            \"categoryacq1\" = case_when(A01a_cat == 1 ~ \"generally applicable provision\",\n                                       A01a_cat == 2 ~ \"dual citizenship restrictions\",\n                                       A01a_cat == 3 ~ \"wedlock restriction\",\n                                       A01a_cat == 4 ~ \"only if father is a citizen\",\n                                       A01a_cat == 5 ~ \"only if citizen is part of a particular group\",\n                                       A01a_cat == 0 ~ \"no provision\"),\n            \"acq_bornabroad\" = case_when(A01b_bin == 1 ~ \"Yes\",\n                                         A01b_bin == 0 ~ \"No\"),\n            \"categoryacq2\" = case_when(A01b_cat == 1 ~ \"generally applicable provision\",\n                                       A01b_cat == 2 ~ \"dual citizenship restrictions\",\n                                       A01b_cat == 3 ~ \"wedlock restriction\",\n                                       A01b_cat == 4 ~ \"only if father is a citizen\",\n                                       A01b_cat == 5 ~ \"only if citizen is part of a particular group\",\n                                       A01b_cat == 6 ~ \"generational restrictions\",\n                                       A01b_cat == 0 ~ \"no provision\"),\n            \"acq_marriage\" = case_when(A08_bin == 1 ~ \"Yes\",\n                                       A08_bin == 0 ~ \"No\"),\n            \"categoryacq3\" = case_when(A08_cat == 1 ~ \"generally applicable provision\",\n                                       A08_cat == 2 ~ \"residence required\",\n                                       A08_cat == 3 ~ \"only for female spouse of male citizen (no residence required)\",\n                                       A08_cat == 4 ~ \"only for female spouse of male citizen (residence required)\",\n                                       A08_cat == 5 ~ \"only for male spouse of female citizen\",\n                                       A08_cat == 6 ~ \"provisions differ by gender\",\n                                       A08_cat == 7 ~ \"only if spouse is a member of a particular group\",\n                                       A08_cat == 0 ~ \"no provision\"))\ncitizen_acq\n```\n\n```{r}\n# interactive dendrogram\n# gain citizenship by being born in the country to a citizen\n# create dataset\nacq_borndescent <- select(citizen_acq, c(acq_borndescent, categoryacq1)) \nacq_borndescent <- as.data.frame(acq_borndescent)\n\ncollapsibleTree(acq_borndescent, \n                hierarchy = c(\"acq_borndescent\", \"categoryacq1\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n\n# gain citizenship by being born abroad to a citizen\nacq_bornabroad <- select(citizen_acq, c(acq_bornabroad, categoryacq2)) \nacq_bornabroad <- as.data.frame(acq_bornabroad)\n\ncollapsibleTree(acq_bornabroad, \n                hierarchy = c(\"acq_bornabroad\", \"categoryacq2\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n\n# gain citizenship through marriage\nacq_marriage <- select(citizen_acq, c(acq_marriage, categoryacq3)) \nacq_marriage <- as.data.frame(acq_marriage)\n\ncollapsibleTree(acq_marriage, \n                hierarchy = c(\"acq_marriage\", \"categoryacq3\"),\n                nodeSize = \"leafCount\",\n                width = 500,\n                zoomable = TRUE)\n```\n\nTo answer my research question, I condensed the columns by the frequencies of values `yes` and `no`, and merged them into one dataset.\n\n```{r}\n# what countries have more lax citizenship laws and what countries have more restrictive citizenship laws\ncitizen_yes <- rowSums(citizen_tidy == \"Yes\") %>%\n  as.data.frame()\n\ncitizen_no <-rowSums(citizen_tidy == \"No\") %>%\n  as.data.frame()\n\ncitizen_yes$country <- add_column(citizen_tidy$country)\ncitizen_no$country <- add_column(citizen_tidy$country)\n\n# joint together\nlax_or_restrict <- merge(citizen_yes,citizen_no,by=c(\"country\"))\nlax_or_restrict <- rename(lax_or_restrict, \"Lax_Provisions\" = \"..x\")\nlax_or_restrict <- rename(lax_or_restrict, \"Restrictive_Provisions\" = \"..y\")\n\n# sanity check point\nlax_or_restrict\n\n# most lax laws\nlax_or_restrict %>%\n  arrange(desc(`Lax_Provisions`))\n\n# most restrictive laws\nlax_or_restrict %>%\n  arrange(desc(`Restrictive_Provisions`))\n\n# tree maps\nlax <- lax_or_restrict %>%\n  arrange(desc(`Lax_Provisions`))\nlax <- lax[1:10,]\n\ntreemap(lax,\n            index=\"country\",\n            vSize=\"Lax_Provisions\",\n            type = \"index\",\n            title= \"Top 10 Countries of with Lax Citizenship Laws\")\n\nrestrict <- lax_or_restrict %>%\n  arrange(desc(`Restrictive_Provisions`))\nrestrict <- restrict[1:10,]\n\ntreemap(restrict,\n            index=\"country\",\n            vSize=\"Restrictive_Provisions\",\n            type = \"index\",\n            title= \"Top 10 Countries of with Restrictive Citizenship Laws\")\n```\n\nThe countries with the most lax citizenship laws are Germany, Greece, Austria, the Netherlands, and Finland, all in the European Union. The countires with the most restrictive citizenship laws are Uruguay, Palau, North Korea, China, and Cuba. \n\nFrom all of these visualizations I coded, one could see stark differences between countries, even those neighboring each other. One country can be relatively open, while its neighbor is closed off to the world. \n\n## Reflection and Conclusion\n\nI had no prior experience with R before starting my masters in data analytics, and after many classes, resources, and Google searches, I must say that I did a great job on this project. Let me explain:\n\nChoosing a topic that interested me made the project more manageable. I was always interested in learning about other countries, such as cultures, laws, and societies in each country. This dataset of citizenship laws by each country is no different. I have visited 10 countries, and continue to visit more in the foreseeable future.\n\nI felt like I hit the jackpot when I stumbled upon this dataset on the database archival website Data is Plural. It was messy, tedious, and confusing to read: it was the perfect dataset to clean, manipulate, and visualize. The handy guide attached in the ZIP file was the cherry on the top. \n\nThe most challenging part of data analytics as a whole is trying to figure out which codes to use for my desired results. A map? Try a bunch of these codes (we won''t guarantee your map would look funky). Forgot to capitalize a letter? Your data doesn't exist. I have the basic idea on what I want my end results to be, but I have to spend hours looking for the right code and find the tiny problem I have been overlooking for those past hours. I give up, until I don't: the feeling of finding that one line of code is the feeling of success. \n\nHowever, I wish I learned to code earlier in my childhood. I would have caught up with the rest of the class if I had a basic idea of coding, but it's better to learn now than never. I'm in the middle of my career change from marketing to data analytics, which permits me to work behind the scene. \n\nOverall, the world is not our oyster and we must follow the laws wherever we go. It is always ideal to do research beforehand or hire an immigration lawyer. \n\n## Resources\n\nCookbook for R, http://www.cookbook-r.com/. \n\nGrolemund, Hadley Wickham and Garrett. R For Data Science. https://r4ds.had.co.nz/introduction.html. \n\nHoare, Jake. “How to Aggregate Data in R: R-Bloggers.” R, 12 July 2018, https://www.r-bloggers.com/2018/07/how-to-aggregate-data-in-r/. \n\nHoltz, Yan. “Help and Inspiration for R Charts.” The R Graph Gallery, https://r-graph-gallery.com/. \n\n“How to Count Number of Times a Character Appears in a Row.” Stack Overflow, 23 Nov. 2013, https://stackoverflow.com/questions/20100298/how-to-count-number-of-times-a-character-appears-in-a-row. \n\nVINK, Maarten Peter, et al. “Globalcit Citizenship Law Dataset.” Cadmus Home, European University Institute, 1 Jan. 2020, https://cadmus.eui.eu/handle/1814/73190. \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":"distill::distill_article","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Final Project - Kristin Abijaoude.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","execution":{"freeze":"auto"},"smooth-scroll":true,"page-layout":"full","mainfont":"Open Sans","linkcolor":"#881c1c","theme":{"light":["flatly","../styles.scss"],"dark":["darkly","../styles.scss"]},"comments":{"giscus":{"repo":"DACSS/601_Fall_2022","category":"Announcements"}},"toc-location":"right","search":true,"title":"Citizenship Laws by Country","description":"MY FINAL PROJECT","author":"KRISTIN ABIJAOUDE","date":"`r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}}}