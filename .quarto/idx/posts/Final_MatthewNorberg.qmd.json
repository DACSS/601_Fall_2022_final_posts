{"title":"Olympic Analysis","markdown":{"yaml":{"title":"Olympic Analysis","description":"Final Paper For DACSS 601","author":"Matthew Norberg","date":"`r Sys.Date()`","format":{"html":{"toc":true,"code-copy":true,"code-tools":true,"smooth-scroll":true,"highlight-style":"github","df-print":"paged"}},"categories":["Final","Olympic_Data"]},"headingText":"| label: setup","containsRefs":false,"markdown":"\n\n```{r setUP}\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(ggpubr)\n\nknitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)\n```\n\n# Introduction\n\nThe Olympic Games are a tradition dating all the way back to Ancient Greece.  Today, the Games are held every two years by the International Olympic Committee (IOC).  The first set of modern Olympic games were held by the IOC and took place in Athens in 1896.  In 1924, the first edition of Winter Olympic Games was held in France^2^.  During the games, athletes compete for the right to be dubbed the best in the world.  At the same time, each country is competing each other to win the largest number of medals.\n\n## Olympic Success\n\nFor most of us, competing in the Olympic Games is nothing more than a fantasy.  It would be quite an accomplishment to represent your country in the Games, let alone earn a medal.  However, for many of the athletes competing in the Games, the goal is to earn a gold medal, rather than just competing.  So what does it mean to be a \"successful\" athlete in the Olympic Games?  Are you successful if you make it to the Games or are you only successful if you earn a medal?  For the purposes of this paper, I am going to define Olympic success as having earned a medal in the Olympic Games.\n\nWhat do the most successful athletes in the Olympic Games have in common?  Do athletes who win a lot of medals have similar physical characteristics in common that could explain why they have been so successful?  In this paper, I analyzed results the results from each Olympic Games dating back to the first modern games in 1896 up to the Olympic Games in held in 2016 to answer these questions. \n\n# Data\n\nThe results of the [Olympic Games](https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results?select=athlete_events.csv)^1^ results have been scraped and made publicly available on Kaggle.  The data set is read in and displayed using the code below.\n\n```{r readIn}\n# Read in the data set\nathletes <- read_csv('Data/athlete_events.csv')\nnoc <- read_csv('Data/noc_regions.csv')\n\n# Join the tables together\nathletes <- inner_join(athletes, noc, by = \"NOC\")\n```\n\n## Data Description\n\nThe dataset comes as a set of two csv files: 'athlete_events' and 'noc_regions' where each file represents a table in a relational database.  Each row in this table contains information about an athlete who competed in an Olympic event.  Note that athletes can occur in the table more than once if they competed in multiple events or games.  A good example of an athlete who appears many times in the dataset is Michael Phelps.  Consequently, a case should be treated as the combination of the athlete name, year, and event. \n\n```{r phelps}\n# Find all the rows containing information about Michael Phelps\nfilter(athletes, str_detect(Name, \"Michael\") & str_detect(Name, \"Phelps\")) %>%\n  select(-c(ID, NOC, Sex, Height, Weight, Season))\n```\n\n### Basic Information About The Data\n\nEach athlete in the dataset is given a unique id to identify them.  This is useful in cases where two athletes have the same name, but are different people.  In total, there are 135,404 distinct id's in the dataset indicating that the total number of athletes in the dataset is 135,404.  The following tibble lists the number of athletes who compete for each region in the dataset. Additionally, the graph proceeding the tibble illustrates how the number of  athletes competing in the games has grown over time. \n\n```{r athletesPerRegion, results='hold', fig.show='hold'}\nathletes %>%\n  group_by(region) %>%\n  summarise(num_athletes = n_distinct(ID)) %>%\n  arrange(region)\n\nathletes %>%\n  group_by(Year, Season) %>%\n  summarise(n = n_distinct(ID), .groups = \"keep\") %>%\n  ggplot(mapping = aes(x = Year, y = n, color = Season)) +\n  geom_point() + \n  geom_line() +\n  labs(y = \"Numbr of Athletes\", title = \"Number of Athletes Competing In Games Over Time\")\n```\n\nThe dataset covers Olympic data from 1896 to 2016.  Throughout this time span, there was 29 occurrences of the Summer Games and 22 occurrences of the Winter Games which is verified with the query below.  I found it surprising that there were 29 occurrences of the Summer Games instead of 31.  If we use the common knowledge that the games are held every four years and we assume that none of the years are missing, then 29 occurrences of the Summer Games would indicate that the last year in the dataset is 2008 (`4 * (29 - 1) + 1896 = 2008`), not 2016.  There are two reasons which explain why there are only 29 occurrences instead of 31:\n\n1. The Games were [cancelled](https://www.europeana.eu/en/blog/the-olympic-games-that-didnt-happen)^4^ in 1916, 1940, and 1944.\n\n2. The Games were held in 1906 even though they were held in 1904 and 1908 which means there was period in time when the Games were not held every four years.\n\n```{r gamesBySeason}\nathletes %>%\n  group_by(Season) %>%\n  summarise(Num_Games = n_distinct(Year))\n```\n\nIn total there are 66 sports included in the dataset.  Each sport includes some number of events for athletes to compete in.  There are 765 events in the dataset of which 554 are male events and the remaining 269 are female.  The following graph illustrates how the number of events in each game has grown over time.  \n\n```{r}\nathletes %>%\n  group_by(Year, Season) %>%\n  summarise(n = n_distinct(Event), .groups = \"keep\") %>%\n  ggplot(mapping = aes(x = Year, y = n, color = Season)) +\n  geom_point() + \n  geom_line() +\n  labs(y = \"Numbr of Events\", title = \"Number of Events Included In The Games Over Time\")\n```\n\n## Cleaning The Data\n\n### Initial Transformations\n\nWe can start by dropping the 'Games' column because each entry in the column is a combination of the 'Year' and 'Season' columns.  Additionally, we can drop the 'notes' column which comes from the 'noc' file because most of the values are not available and the values which are available are not relevant to this analysis.\n\nWe can clean up the 'Medal' column by replacing the values that are not available with the string \"None\".  Based on the context of the data set, we can assume that a NA in this column means that the athlete did not win a Medal in that event.  Therefore, replacing these values with \"None\" seems logical.\n\n```{r initial}\n# Get rid of games and notes columns\nathletes <- select(athletes, -c(Games, notes))\n\n# Switch NA in Medal to None\nathletes <- athletes %>% replace_na(list(Medal = \"None\"))\n```\n\n### Handling Missing Values\n\nThere are four columns in the data set which contain missing values: 'Region', 'Age', 'Height', and 'Weight'.  I started by handling the missing values in the 'region' column first.  We can find the 'NOC' associated with unknown regions by querying the 'noc_regions' data set.\n\n```{r NOC}\n# Display NA in region\nfilter(noc, is.na(region))\n```\n\nWe know that any row in the 'athletes' tibble that has an 'NOC' value of 'ROT', 'TUV', or 'UNK' will have a value in the 'Region' column that is NA.   I think it would be sensible to replace the NA values according to the table below.  The chunk of code below was used to replace the missing values according to the mapping in the table. \n\n| NOC | Region  | Notes                |\n| --- | ------- | -------------------- |\n| ROT | None    | Refugee Olympic Team |\n| TUV | Tuvala  | Tuvala               |\n| UNK | Unknown | Unknown              |\n\n```{r cleanRegion}\n# Fill in missing values in Region column\nathletes <- athletes %>%\n            mutate(Temp = case_when(NOC == \"ROT\" ~ \"None\",\n                                      NOC == \"TUV\" ~ \"Tuvala\",\n                                      NOC == \"UNK\" ~ \"Unknown\")) %>%\n            mutate(Region = case_when(is.na(region) ~ Temp,\n                                      !is.na(region) ~ region)) %>%\n            select(-c(region, Temp))\n```\n\nLet's handle the missing values in the 'Age', 'Height', and 'Weight' columns next.  Here's a simple algorithm that we can use to replace all the values in those columns.  I will use the 'Age' column to describe the algorithm but the steps are the same for the other columns. \n\nSuppose we find a row in the data set which has a missing value in the 'Age' column.  We know that the value in the 'Year' column of that row is not missing because the 'Year' column does not contain any missing values.  The same is true for the 'Sex' and 'Sport' columns.  Therefore, we can compute the average athlete age during the given year, sex, and event (ignoring other missing values) and replace the missing value with the average value.\n\nFirst, let's calculate the average age, height, and weight for each year, sex, and event grouping in the data set.  This is calculated and stored in the tibble using the code chunk below.\n\n```{r averageValues}\n# Compute average age, height, and weight by years\nAverageValues <- athletes %>%\n                 group_by(Year, Sex, Event) %>%\n                 summarise(AverageAge = round(mean(Age, na.rm = TRUE), digits = 0),\n                           AverageHeight = round(mean(Height, na.rm = TRUE), digits = 0),\n                           AverageWeight = round(mean(Weight, na.rm = TRUE), digits = 1),\n                           .groups = \"keep\")\n# Display the results\nAverageValues\n```\n\nWe can see that many of the values in the tibble displayed above are not a number ('NaN').  The 'Nan' values in the tibble occur when every athlete that is included in the average calculation for a group has a missing value.  For example, the first 'Nan' value in the tibble occurs for the (1896, 'M', 'Athletics Men's 800 metres') grouping in the 'AverageHeight' and 'AverageWeight' column.  This is due to the fact that every male athlete in the dataset who competed in the 'Athletics Men's 800 metres' event has a missing age and weight as confirmed by the query below. \n\n```{r NANs}\nathletes %>%\n  filter(Year == 1896 & Sex == 'M' & Event == 'Athletics Men\\'s 800 metres') %>%\n  select(Name, Height, Weight)\n```\n\nDue to the presence of the 'NaN' values in the tibble, we will not be able to replace all of the NA values in the tibble.  However, using this approach we will be able to replace many of them.  In the case that we can not resolve a missing value, we will simply leave it is NaN and exclude it from further calculations.\n\n```{r cleanAgeHeightWeight}\nathletes <- inner_join(athletes, AverageValues, by = c('Year', 'Sex', 'Event')) %>%\n            mutate(Age = case_when(!is.na(Age) ~ Age,\n                                    is.na(Age) & !is.nan(AverageAge) ~ AverageAge)) %>%\n            mutate(Height = case_when(!is.na(Height) ~ Height,\n                                       is.na(Height) & !is.nan(AverageHeight) ~ AverageHeight)) %>%\n            mutate(Weight = case_when(!is.na(Weight) ~ Weight,\n                                       is.na(Weight) & !is.nan(AverageWeight) ~ AverageWeight)) %>%\n            select(-c(AverageAge, AverageHeight, AverageWeight))\n```\n\n### Cleaning Sport & Event\n\nThere is another transformation I would like to perform to make the data set a bit cleaner.  Take a look at the first few values in the 'Sport' and 'Event' columns presented below.\n\n```{r sportEvent}\n# Display first few rows of Sport and Event columns\nathletes %>%\n  select(Sport, Event, Sex) %>%\n  head()\n```\n\nNotice how the first word or set of words in the 'Event' column is the same exact string in the 'Sport' column.  If this pattern is true for the entire dataset, then we can remove the 'Sport' portion of the event column to make it look nicer.  The code chunk below was used to test whether or not this pattern is true throughout the entire dataset.  I used the `testCols` function to confirm the pattern in the 'Sport' and 'Event' column was true for the entire dataset.  After I confirmed that the property was true, I ran the `cleanEvent` function to clean the columns. \n\n```{r testSportEvent, eval = FALSE}\ntestCols <- function() {\n  # Iterate along sport column\n  for (i in seq_along(athletes$Sport)) {\n    # Get the sport and event string at row i\n    # Split each string on space character\n    sport <- str_split(athletes$Sport[[i]], \" \")[[1]]\n    event <- str_split(athletes$Event[[i]], \" \")[[1]]\n    # Iterate over items in sport list\n    for (j in seq_along(sport)) {\n      # Check to see if each item in sport is equivalent to corresponding item in event\n      if (sport[[j]] != event[[j]]) {\n        # If it is not equivalent -> stop and display sport and event which breaks pattern\n        cat(\"BREAK\\n\", sport, \" \", event, \"\\nPattern does not hold\")\n        return(FALSE)\n      }\n    }\n  }\n  # If we get here, then the property holds for the entire data set\n  cat(\"Pattern holds for entire data set\\n\")\n  return(TRUE)\n}\n\n# Test Columns\ntestCols()\n\n# Function to clean event column\ncleanEvent <- function() {\n  # Iterate along and event columns\n  for (i in seq_along(athletes$Sport)) {\n    # Split sport and event string at row i on space character\n    sport <- str_split(athletes$Sport[[i]], \" \")[[1]]\n    event <- str_split(athletes$Event[[i]], \" \")[[1]]\n    # Empty string to store new event\n    newEvent <- \"\"\n\n    # Iterate along event list\n    for (j in seq_along(event)) {\n      # Once we get past the length of sport, start piecing together newEvent\n      if (j > length(sport)) {\n        newEvent = str_c(newEvent, event[[j]], \" \")\n      }\n    }\n\n    # Reset newEvent string at position i\n    athletes$Event[[i]] <- newEvent\n  }\n\n  # Return cleaned column to save changes\n  return(athletes$Event)\n}\n\n# Perform event column cleaning\nathletes$Event <- cleanEvent()\n```\n\nIt may be tempting to remove the 'Sex' portion of the 'Event' column as well.  For instance, in the tibble shown above, the first row is ('Basketball', 'Basketball Men's Basketball', 'M').  We could technically change the value in the 'Event' column to just 'Basketball'.  In doing so, we would not lose any information as we know the athlete is a male by looking at the sex column.  However, the pattern that is present in the output above where the sex of the athlete follows the value in the 'Sport' column is not true for every row in the dataset.  Therefore, we would be losing information by removing the term following the value in the 'Sport' column. \n\n### Reordering, Sorting, & Saving\n\nLastly, let's finish the cleaning process by reordering the columns and sorting them to make the data set easier to look at.  Afterwards, I saved the clean dataset so I would not need to repeat the cleaning operations perfomed above. \n\n```{r tidyFrame, eval = FALSE}\n# Change column order and sort by year\nathletes <- athletes %>%\n  relocate(Team, .after = Name) %>%\n  relocate(NOC, .after = Team) %>%\n  relocate(Region, .after = NOC) %>%\n  arrange(Year)\n\n# Save cleaned data set\nwrite_csv(athletes, './Data/athletes_clean.csv')\n```\n\n# Visualizations\n\n## Comparing Medalists Vs Non-Medalists\n\nLet's start by investigating the age, height, and weight columns of the data set for the set of medalists and non-medalists.  This was a tricky calculation to perform because athletes can occur in the dataset more than once and we need to be careful not to double count anyone.  \n\nI started by computing a tibble which contains the unique ID's of all the athletes who have won an at least one event.  Then I created another tibble which contains all the athletes who never won an event.  Note that these tibbles are disjoint and the union of the two tibbles gives us the set of all athletes in the dataset.  After I had the computed both sets of ids, I was able to make use of the `inner_join` operation to create two new tibbles.  The first tibble contains the information about athletes who have won at least one medal over the span of their career.  The second tibble contains information about athletes who never won an event in their career.  Note that these tibbles can not be constructed using the dplyr filter function alone.  In doing so, we would end up with athletes who appear in both the medalist tibble and the non medalist tibble.  Using the approach I described, it is impossible for an athlete to be placed in both tibbles.  \n\nAt this point, we have separated the data into two groups, but an athlete can still appear in each group more than once.  To solve this, I computed the average age, height, and weight for each athlete in both groups.  This operation resulted in two tibbles where each athlete is only recorded once in each tibble. Finally, I could use this information to compute the average age, height, and weight for each group. \n\n```{r basicStats}\n# Read in the clean dataset\ndf <- read_csv('./Data/athletes_clean.csv')\n\n# Helper function to compute average age, height, and weight for each athlete in a tibble\ngetBasicStats <- function(dfView) {\n  toReturn <- dfView %>%\n              group_by(ID, Sex) %>%\n              summarise(Count = n(),\n                        AverageAge = mean(Age, na.rm = TRUE),\n                        AverageHeight = mean(Height, na.rm = TRUE),\n                        AverageWeight = mean(Weight, na.rm = TRUE),\n                        .groups = \"keep\")\n  return(toReturn)\n}\n\n# Helper function to compute average age, height, and weight for a set of athletes in a tibble\nanalyseBasicStats <- function(dfView) {\n  toReturn <- dfView %>%\n              group_by(Sex) %>%\n              summarise(Count = n(),\n                        AvAge = mean(AverageAge, na.rm = TRUE),\n                        SDAge = sd(AverageAge, na.rm = TRUE),\n                        AvHeight = mean(AverageHeight, na.rm = TRUE),\n                        SDHeight = sd(AverageHeight, na.rm = TRUE),\n                        AvWeight = mean(AverageWeight, na.rm = TRUE),\n                        SDWeight = sd(AverageWeight, na.rm = TRUE))\n  return(toReturn)\n}\n\n# Find the ids of all the medalists\nmedalistIDs <- df %>%\n               filter(Medal != \"None\") %>%\n               distinct(ID)\n\n# Find the ids of people who have not won a medal\nnonMedalistIDs <- setdiff(df %>% distinct(ID), medalistIDs)\n\n# Get the statistics for the medalist group\nmedals <- getBasicStats(inner_join(df, medalistIDs, by = \"ID\")) %>%\n          analyseBasicStats(.) %>%\n          mutate(Sex = case_when(Sex == 'F' ~ 'Female Medalist',\n                 Sex == 'M' ~ 'Male Medalist')) %>%\n          rename('Gender/Medal Status' = Sex)\n\n# Get the statistics for the non medalist group\nnonMedals <- getBasicStats(inner_join(df, nonMedalistIDs, by = \"ID\")) %>%\n             analyseBasicStats(.) %>%\n             mutate(Sex = case_when(Sex == 'F' ~ 'Female Non-Medalist',\n                    Sex == 'M' ~ 'Male Non-Medalist')) %>%\n             rename('Gender/Medal Status' = Sex)\n\n# Combine results\nbind_rows(medals, nonMedals) %>% arrange('Gender/Medal Status')\n```\n\nNotice that sum of the values in the 'Count' column above is 135,404 which is the same as the number of athletes in the dataset.  This indicates that we have avoided double counting athletes. \n\nThe tibble displayed above is interesting, but it's not easy to tell if there are any differences between normal athletes and medalists based solely on the output.  Let's create density plots of the age, height, and weight variables for the athletes and the medalists to get a better view of the data. \n\n```{r displayHistograms, results='hold', fig.show='hold'}\nmedalsData <- df %>% inner_join(medalistIDs, by = \"ID\") %>%\n              getBasicStats(.) %>%\n              rename(Age = AverageAge) %>%\n              rename(Height = AverageHeight) %>%\n              rename(Weight = AverageWeight) %>%\n              filter(!is.na(Age)) %>%\n              filter(!is.na(Height)) %>%\n              filter(!is.na(Weight)) %>%\n              mutate(Sex = case_when(Sex == 'F' ~ 'Female Medalist',\n                                     Sex == 'M' ~ 'Male Medalist'))\n\nnonMedalsData <- df %>% inner_join(nonMedalistIDs, by = \"ID\") %>%\n                 getBasicStats(.) %>%\n                 rename(Age = AverageAge) %>%\n                 rename(Height = AverageHeight) %>%\n                 rename(Weight = AverageWeight) %>%\n                 filter(!is.na(Age)) %>%\n                 filter(!is.na(Height)) %>%\n                 filter(!is.na(Weight)) %>%\n                 mutate(Sex = case_when(Sex == 'F' ~ 'Female Non-Medalist',\n                                        Sex == 'M' ~ 'Male Non-Medalist'))\n\nggplot() +\ngeom_density(mapping = aes(x = Age, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = medalsData) +\ngeom_density(mapping = aes(x = Age, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = nonMedalsData) +\nlabs(title = \"Age & Sex vs Olympic Outcomes\")\n\nggplot() +\ngeom_density(mapping = aes(x = Height, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = medalsData) +\ngeom_density(mapping = aes(x = Height, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = nonMedalsData) +\nlabs(title = \"Height & Sex vs Olympic Outcomes\")\n\nggplot() +\ngeom_density(mapping = aes(x = Weight, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = medalsData) +\ngeom_density(mapping = aes(x = Weight, colour = Sex),\n             adjust = 2,\n             alpha = 0.1,\n             data = nonMedalsData) +\nlabs(title = \"Weight & Sex vs Olympic Outcomes\")\n```\n\nThe density plots generated above for the medalists and non-medalists groups of athletes are very similar to each other.  However, it is interesting that the peaks for the non-medalist group are taller than the medalist group for each gender in both the 'Height' and 'Weight' diagrams.  This indicates that a larger proportion of non-medalists are centered around the average value than medalists in both the height and weight category. \n\nBased on the plots generated in the previous code block, it appears that it would be difficult to predict whether or not an athlete would win a medal based solely on their physical characteristics such as age, height, and weight due to the fact that the density plots are very similar.  This means that we need to look at the data in some other ways to gain insight on Olympic status. \n\n## Comparing Top Athletes Against Thier Competitors\n\nThe previous section showed that it is hard to find differences between medalists and non-medalists based off their physical characteristics.  Instead, let's compare the most successful Olympians who have won the most medals to everyone else.  Hopefully, we will see a difference between the physical characteristics of the most successful athletes and their competitors.  The following chunk of R code find the athletes that have won the most medals and shows the number of each type of medal earned by the athlete.\n\n```{r bestAthletesCreation}\n# Medal count by athlete\nbestAthletes <- df %>%\n                filter(Medal != \"None\") %>%\n                group_by(ID, Name, Sport, Sex) %>%\n                count(Medal) %>%\n                pivot_wider(names_from = Medal, values_from = n) %>%\n                mutate(TotalMedals = Bronze + Silver + Gold) %>%\n                relocate(Bronze, .after = Sport) %>%\n                relocate(Silver, .after = Bronze) %>%\n                relocate(Sex, .after = Name) %>%\n                ungroup() %>%\n                arrange(desc(TotalMedals))\n\n# Display the top athletes\nbestAthletes\n```\n\nLet's see how some of the top athletes who earned the most medals compare to the rest of the athletes in their sport.  The following chunk of code generates height and weight histograms for the top three athletes which show where they stand in relation to their competitors. \n\n```{r compAverages}\ntop3 <- bestAthletes %>%\n        head(n = 3)\n\ncompAverages <- function() {\n  averages <- tibble(Name = character(), AverageHeight = numeric(), AverageWeight = numeric(), AverageAge = numeric())\n  for (i in seq_along(top3$Name)) {\n    id <- top3$ID[[i]]\n    name <- top3$Name[[i]]\n    averages <- bind_rows(averages, df %>% \n                          filter(ID == id & Name == name) %>%\n                          group_by(ID, Name) %>%\n                          summarise(AverageHeight = mean(Height, na.rm = TRUE), \n                                    AverageWeight = mean(Weight, na.rm = TRUE), \n                                    AverageAge = mean(Age, na.rm = TRUE), \n                                    .groups = \"keep\"))\n  }\n  return (averages)\n}\n\ncompAthletes <- function() {\n  \n  # Compute average height and weight for each athlete\n  averages <- compAverages()\n\n  for (i in seq_along(top3$Name)) {\n    # Collect name, sport, event, and gender\n    name <- top3$Name[[i]]\n    sport <- top3$Sport[[i]]\n    gender <- top3$Sex[[i]]\n    \n    # Get height and weight for current athlete from averages\n    cHeight <- (averages %>% filter(Name == name))$AverageHeight[[1]]\n    cWeight <- (averages %>% filter(Name == name))$AverageWeight[[1]]\n    cAge <- (averages %>% filter(Name == name))$AverageAge[[1]]\n    \n    # Get height and weight for all athletes \n    others <- df %>% \n              filter(Sport == sport & Sex == gender) %>%\n              group_by(ID) %>%\n              summarise(Height = mean(Height, na.rm = TRUE),\n                        Weight = mean(Weight, na.rm = TRUE),\n                        Age = mean(Age, na.rm = TRUE),\n                        .groups = \"keep\")\n    mHeight <- (others %>% filter(!is.nan(Height)) %>% summarise(mean = mean(Height), na.rm = TRUE, .groups = \"keep\"))$mean[[1]]\n    mWeight <- (others %>% filter(!is.nan(Weight)) %>% summarise(mean = mean(Weight), na.rm = TRUE, .groups = \"keep\"))$mean[[1]]\n    mAge <- (others %>% filter(!is.nan(Age)) %>% summarise(mean = mean(Age), na.rm = TRUE, .groups = \"keep\"))$mean[[1]]\n    \n    # Reset gender variable for graph aesthetics\n    gender <- if (gender == \"M\") \"Male\" else \"Female\"\n    \n    # Graph For Height Information\n    l <- others %>%\n         filter(!is.nan(Height)) %>%\n         ggplot() +\n         geom_density(mapping = aes(x = Height),\n                      adjust = 2,\n                      alpha = 0.1) +\n         geom_vline(xintercept = cHeight, color=\"red\") +\n         geom_vline(xintercept = mHeight, color=\"blue\") +\n         labs(y = \"\")\n    \n    # Graph For Weight Information\n    m <- others %>%\n         filter(!is.nan(Weight)) %>%\n         ggplot() +\n         geom_density(mapping = aes(x = Weight),\n                      adjust = 2,\n                      alpha = 0.1) +\n         geom_vline(xintercept = cWeight, color=\"red\") +\n         geom_vline(xintercept = mWeight, color=\"blue\") + \n         labs(y = \"\")\n    \n    # Graph For Weight Information\n    r <- others %>%\n         filter(!is.nan(Age)) %>%\n         ggplot() +\n         geom_density(mapping = aes(x = Age),\n                      adjust = 2,\n                      alpha = 0.1) +\n         geom_vline(xintercept = cAge, color=\"red\") +\n         geom_vline(xintercept = mAge, color=\"blue\") + \n         labs(y = \"\")\n    \n    # Display Graphs\n    grid.arrange(top = str_c(name, \" vs All Athletes In \", gender, \" \", sport),\n                 bottom = str_c(\"Red -> \", name, \"; Blue -> mean\"),\n                 left = \"density\",\n                 l, m, r, ncol = 3)\n  }\n  \n}\n\ncompAthletes()\n```\n\nIt is hard to see a consistent pattern in the charts above in the statistics displayed above.  For example, Michael Phelps was taller than the average competitors, but Nikolay Yefimovich as quite a bit smaller the average competitor.  Based on what we have seen in the previous two subsections, it appears that way need to restrict our analysis to a singular sport and possibly to even a single event within a sport in order to uncover characteristics which separate medalists from non-medalists.  For instance, when we compared medalists to non-medalists, we were comparing the two groups across every sport in the dataset which explains why there was no major difference in the density plots.  In the previous section, we compared the most successful athletes to their competitors.  There were categories where these athletes were indeed outliers, but there is no pattern linking all these athletes together which is likely caused by the fact that they compete in different sports. \n\n## Comparing Countries By Number of Medals\n\nIn the previous section, we compared the most successful athletes to their competitors.  In this section, we will switch focus and investigate whether an athletes country has an impact on their success.  To start investigating how medals relates to country, let's find out how many medals of each type each country has and how many total medals each country has.  This has been done with the following chunk of R code.\n\n```{r countryMedals, results='hold', fig.show='hold'}\ncountryMedal <- df %>%\n                group_by(Region) %>%\n                count(Medal) %>%\n                pivot_wider(names_from = Medal, values_from = n) %>%\n                relocate(Bronze, .after = None) %>%\n                relocate(Silver, .after = Bronze) %>%\n                arrange(desc(Gold)) %>%\n                mutate(TotalMedals = sum(Bronze,Silver,Gold, na.rm = TRUE))\ncountryMedal\n\n# Display Information\ncountryMedal %>%\n  head(n = 25) %>%\n  ggplot(aes(x = fct_reorder(Region, TotalMedals), y = TotalMedals)) +\n    geom_bar(stat = \"identity\", fill=\"#f68060\", alpha=.6, width=.4) +\n    coord_flip() +\n    theme_bw() +\n    labs(x = \"Country\", title = \"Number of Medals Per Country\")\n```\n\nThe skewness seen in the medal count could be explained by some countries having more athletes competing in the games than others.  Let's map each country to the number of athletes that have competed for them.  Note that in the calculation below, each athlete is counted only once, even if they competed in multiple events or Olympic games. \n\n```{r numAthletesByCountry}\nathleteCount <- df %>%\n                group_by(Region, Name) %>%\n                group_by(Region) %>%\n                count() %>%\n                rename(Athletes = n) %>%\n                arrange(desc(Athletes))\nathleteCount\n```\n\nNot surprisingly, many of the counties that have won a lot of medals also have the most athletes.  This could explain the skewness that is seen Number of Countries vs Number of Medals plot above.  The chart below show the statistics for the number of medals earned by each country normalized by the total number of athletes that competed for the country.\n\n```{r normalized, results='hold', fig.show='hold'}\nnormed <- inner_join(countryMedal, athleteCount, by = \"Region\") %>%\n          mutate(MedalsPerAthlete = TotalMedals / Athletes) %>%\n          arrange(desc(MedalsPerAthlete))\n\nnormed\n\nnormed %>%\n  head(n = 125) %>%\n  ggplot(aes(x = fct_reorder(Region, MedalsPerAthlete), y = MedalsPerAthlete)) +\n    geom_bar(stat = \"identity\", fill=\"#f68060\", alpha=.6, width=.4) +\n    coord_flip() +\n    theme_bw() +\n    theme(axis.text.y = element_blank(),\n          axis.ticks.y = element_blank()) +\n    labs(x = \"Country\", title = \"Number of Medals Per Athlete Per Country\")\n\n```\n\nIn the chart above, I removed the country labels so we could display the number of medals per athlete for many countries in the chart.  You can figure out which countries correspond to the top bars by looking at the tibble above it.  The chart reveals that the distribution is still very skewed even if we normalize the number of medals per country by the number of athletes who have competed. \n\nOne last way that we can visualize the number of medals earned by with each country is with an evolution graph.  The visual below shows the medal progression for the top 15 medal earning countries in the data set. \n\n```{r timeGraph}\ndf %>%\n  filter(Region %in% (countryMedal %>% head(15))$Region) %>%\n  group_by(Region, Year) %>%\n  count(Medal) %>%\n  pivot_wider(names_from = Medal, values_from = n) %>%\n  mutate(TotalMedals = sum(Bronze,Silver,Gold, na.rm = TRUE)) %>%\n  group_by(Region) %>%\n  mutate(CumulativeMedals = cumsum(TotalMedals)) %>%\n  ggplot(mapping = aes(x = Year, y = CumulativeMedals, color = Region)) +\n  geom_point() +\n  geom_line() +\n  labs(x = \"Year\",\n       y = \"Total Number of Medals Earned At Time Period X\",\n       title = \"Region Medal Accumulation Over Time\")\n```\n\nThe results shown above seem to indicate that athletes from some countries may be more likely to win Olympic medals than others. Additionally, the likelihood that an athlete would win a medal based on their country changes over time as indicated by the chart above.  For example the likelihood that an athlete from the United States wins a medal in 2010 appears to be more likely than in 1896 due to the fact that the United States has accumulated many more medals in 2010.  \n\n# Reflection \n\n## Process\n\nI started the analysis by cleaning the data set and handling the missing values.  Doing so made it much easier to generate the figures and perform calculations.  After cleaning the data, I analyzed the athletes by generating histograms for the medalist athletes and the non-medalist athletes to compare them.  I was hoping there would be noticeable differences between the groups which could explain why one group won Olympic medals and the other group did not.  Unfortunately, there was not any substantial noticeable differences that could be observed in the graphs.  My next idea was to compare the most successful athletes to the rest of the athletes in their respective sports.  This approach provided some insight as to why these athletes were successful, but there was no pattern which could be observed across the ones which were analyzed.  At this point, it became clear that in order to uncover the characteristics of successful athletes, the scope of the analysis needs to be narrowed down to a particular sport of interest.  My last idea was to analyze the amount of medals earned by each country.  This analysis showed that some countries have earned many more medals than others and that an athlete's country may be an indicator of Olympic success.  That is, athletes from some countries are more likely to win medals than athletes than from others.  \n\n## Next Steps\n\nIf I were to continue investigating the dataset, I would narrow down my analysis to a single sport.  The analysis above did not reveal many observable differences between medalists and non-medalists.  As I alluded to previously, I think this is due to the fact that I was searching for patterns that differentiated the two groups across each sport in the dataset.  However, I now believe that this approach is too broad which made it difficult to find substantial results.  In addition to narrowing down analysis to one sport, I would also look to see if combinations of variables can be used to predict Olympic success.  Previously, I was looking at singular variables and comparing them to Olympic success.  However, we may see more interesting results if we compare pairs of variables to Olympic success. For example, the graph below shows the outcomes of male Olympic swimmers based on their height and weight.  In the graph, it appears as though most of the gold medalists appear in the upper right hand corner indicating that the combination of an athletes height and weight are important in male swimming.\n\n```{r twoVarOutcomes}\ndf %>%\n  filter(Sex == \"M\" & \n         Sport == \"Swimming\" & \n         Medal != \"None\" & \n         !is.na(Height) & \n         !is.na(Weight)) %>%\n  ggplot() +\n  geom_point(aes(x = Height, y = Weight, color = Medal)) +\n  labs(title = \"Height Weight & Outcome For Male Olympic Swimmers\",\n       caption = \"*Non-medalists ommitted\")\n```\n\nIn addition to investigating how multiple variables could impact medal status, I would also continue to look into the effect that an athlete's country has on performance.  However, in the future, I would compare countries against each other for one specific sport rather than comparing them across every sport.  I doing so, I would hope to get a better idea of whether an athlete would win a medal or not by looking at their country and their sport.  For instance, we can look at how well each country has done in the male swimming event.  Looking at the chart below, I would predict that athletes from the United States are much more likely to earn a medal than athletes from Cuba.  \n\n```{r}\ndf %>%\n  filter(Sex == \"M\" & Sport == \"Swimming\") %>%\n  group_by(Region) %>%\n  count(Medal) %>%\n  pivot_wider(names_from = Medal, values_from = n) %>%\n  mutate(TotalMedals = sum(Bronze,Silver,Gold, na.rm = TRUE)) %>%\n  arrange(desc(TotalMedals)) %>%\n  head(n = 25) %>%\n  ggplot(aes(x = fct_reorder(Region, TotalMedals), y = TotalMedals)) +\n    geom_bar(stat = \"identity\", fill=\"#f68060\", alpha=.6, width=.4) +\n    coord_flip() +\n    theme_bw() +\n    labs(x = \"Country\", y = \"Total Medals\", title = \"Number of Medals Per Country In Men's Swimming\")\n```\n\n# Conclusion\n\nThe results from the analysis above have not shown that there is not any substantial correlation between an athletes physical characteristics such as age, height, and weight and Olympic Success when we do the comparison across many sports.  However, we have found that there is a connection between an athletes country and sport and their odds of success.  Additionally, we have theorized that there is likely a correlation between an athletes physical characteristics and their Olympic outcomes for individual sports.  \n\nBefore starting this analysis, I had hoped to find a connection between an athletes physical characteristics and their success across many sports.  Such a correlation could be useful for athletes because it would give them insight on what they might need to do to improve their odds of winning a medal.  For example, suppose we found out that athletes who win medals all have these characteristics in common.  If that were the case, then an athlete who aspires to win a medal might look at the data and try to copy those characteristics to better their odds.  Although we did not find such characteristics, I believe they likely exist and I would be curious to figure out what they are.  For instance perhaps there is a correlation between an athletes maximum lung capacity and gold medals, but we could not see it because maximum lung capacity is not a stat that is included in the dataset.  It would be interesting to see if future data about the Olympics will record more complex statistics like these and thus allow for a more rigorous analysis on the athletes to find common characteristics of medalists.\n\n# Bibliography\n\n1. [Kaggle Data Set](https://www.kaggle.com/datasets/heesoo37/120-years-of-olympic-history-athletes-and-results?select=athlete_events.csv)\n\n2. [Modern Olympic Data](https://olympics.com/ioc/olympic-games)\n\n3. [R Programming Language](https://www.R-project.org/)\n\n4. [Cancelled Olympic Games](https://www.europeana.eu/en/blog/the-olympic-games-that-didnt-happen)\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":true,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"github","output-file":"Final_MatthewNorberg.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","execution":{"freeze":"auto"},"smooth-scroll":true,"page-layout":"full","mainfont":"Open Sans","linkcolor":"#881c1c","theme":{"light":["flatly","../styles.scss"],"dark":["darkly","../styles.scss"]},"comments":{"giscus":{"repo":"DACSS/601_Fall_2022","category":"Announcements"}},"toc-location":"right","search":true,"title":"Olympic Analysis","description":"Final Paper For DACSS 601","author":"Matthew Norberg","date":"`r Sys.Date()`","categories":["Final","Olympic_Data"],"code-copy":true},"extensions":{"book":{"multiFile":true}}}}}